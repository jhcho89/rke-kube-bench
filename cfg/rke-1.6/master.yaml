---
controls:
version: 1.6
id: 1
text: "Master Node"
type: "master"
groups:
  - id: 1.1
    text: "Master Node 설정 파일 권한 설정"
    checks:
      - id: 1.1.1
        text: "kube-apiserver.yaml 파일 권한 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c permissions=%a $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for kube-apiserver.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.2
        text: "kube-apiserver.yaml 파일 소유 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for kube-apiserver.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.3
        text: "kube-controller-manager.yaml 파일 권한 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c permissions=%a $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for controller-manager.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.4
        text: "kube-controller-manager.yaml 파일 소유 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for controller-manager.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.5
        text: "kube-scheduler.yaml 파일 권한 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c permissions=%a $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for scheduler.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.6
        text: "kube-scheduler.yaml 파일 소유 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for scheduler.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.7
        text: "etcd.yaml 파일 권한 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c permissions=%a $etcdconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for etcd.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.8
        text: "etcd.yaml 파일 소유 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c %U:%G $etcdconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for etcd.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.9
        text: "Container Network Interface 파일 권한 확인"
        audit: |
          ps -ef | grep $kubeletbin | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c permissions=%a
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c permissions=%a
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Run the below command (based on the file location on your system) on the master node.
          For example,
          chmod 644 <path/to/cni/files>
        scored: false

      - id: 1.1.10
        text: "Container Network Interface 파일 소유 확인"
        audit: |
          ps -ef | grep $kubeletbin | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c %U:%G
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c %U:%G
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Run the below command (based on the file location on your system) on the master node.
          For example,
          chown root:root <path/to/cni/files>
        scored: false

      - id: 1.1.11
        text: "admin.conf 파일 권한 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c permissions=%a /etc/kubernetes/admin.conf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Cluster provisioned by RKE does not store the kubernetes default kubeconfig credentials file on the nodes.
        scored: true

      - id: 1.1.12
        text: "admin.conf 파일 소유 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %U:%G /etc/kubernetes/admin.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Cluster provisioned by RKE does not store the kubernetes default kubeconfig credentials file on the nodes.
        scored: true

      - id: 1.1.13
        text: "scheduler.conf 파일 권한 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c permissions=%a $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for scheduler.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.14
        text: "scheduler.conf 파일 소유 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c %U:%G $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for scheduler.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.15
        text: "controller-manager.conf 파일 권한 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c permissions=%a $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for controller-manager.
          All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.16
        text: "controller-manager.conf 파일 소유 확인(예외)"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c %U:%G $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Cluster provisioned by RKE doesn't require or maintain a configuration file for controller-manager.
          All configuration is passed in as arguments at container run time.
        scored: true

  - id: 1.2
    text: "etcd 데이터 디렉터리 권한 설정"
    checks:
      - id: 1.2.1
        text: "etcd 데이터 디렉터리 권한 확인"
        audit: stat -c %a /var/lib/etcd
        tests:
          test_items:
            - flag: "700"
              compare:
                op: eq
                value: "700"
              set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the below command:
          ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example,
          chmod 700 /var/lib/etcd
        scored: true

      - id: 1.2.2
        text: "etcd 데이터 디렉터리 소유 확인"
        audit: stat -c %U:%G /var/lib/etcd
        tests:
          test_items:
            - flag: "etcd:etcd"
              set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the below command:
          ps -ef | grep etcd
          Run the below command (based on the etcd data directory found above).
          For example, chown etcd:etcd /var/lib/etcd

          A system service account is required for etcd data directory ownership.
          Refer to Rancher's hardening guide for more details on how to configure this ownership.
        scored: true

  - id: 1.3
    text: "Master Node 인증서 파일 권한 설정"
    checks:
    - id: 1.3.1
      text: "PKI 인증서 디렉터리 소유 확인"
      audit: "helper_scripts/check_files_owner_in_dir.sh /etc/kubernetes/ssl"
      tests:
        test_items:
          - flag: "true"
            compare:
              op: eq
              value: "true"
            set: true
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown -R root:root /etc/kubernetes/pki/
      scored: true

    - id: 1.3.2
      text: "PKI 인증서 파일 권한 확인"
      audit: "helper_scripts/check_certfiles_permissions.sh"
      use_multiple_values: true
      tests:
        test_items:
          - flag: "permissions"
            compare:
              op: bitmask
              value: "644"
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod -R 644 /etc/kubernetes/pki/*.crt
      scored: true

    - id: 1.3.3
      text: "PKI 키 파일 권한 확인"
      audit: "helper_scripts/check_keyfiles_permissions.sh"
      use_multiple_values: true
      tests:
        test_items:
          - flag: "permissions"
            compare:
              op: bitmask
              value: "600"
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod -R 600 /etc/kubernetes/ssl/*key.pem
      scored: true

  - id: 2.1
    text: "API Server 인증 제어"
    checks:
      - id: 2.1.1
        text: "--anonymous-auth false 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the below parameter.
          --anonymous-auth=false
        scored: true

      - id: 2.1.2
        text: "--basic-auth-file 제거 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--basic-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication. Then,
          edit the API server pod specification file $apiserverconf
          on the master node and remove the --basic-auth-file=<filename> parameter.
        scored: true

      - id: 2.1.3
        text: "--token-auth-file 제거 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication. Then,
          edit the API server pod specification file $apiserverconf
          on the master node and remove the --token-auth-file=<filename> parameter.
        scored: true

      - id: 2.1.4
        text: "--insecure-bind-address 제거 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--insecure-bind-address"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and remove the --insecure-bind-address parameter.
        scored: true

      - id: 2.1.5
        text: "--insecure-port 0 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--insecure-port"
              compare:
                op: eq
                value: 0
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the below parameter.
          --insecure-port=0
        scored: true

      - id: 2.1.6
        text: "--service-account-lookup true 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the below parameter.
          --service-account-lookup=true
          Alternatively, you can delete the --service-account-lookup parameter from this file so
          that the default takes effect.
        scored: true
        
      - id: 2.1.7
        text: "--profiling false 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the below parameter.
          --profiling=false
        scored: true

  - id: 2.2
    text: "API Server 권한 제어"
    checks:      
      - id: 2.2.1
        text: "--authorization-mode AlwaysAllow 제거 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --authorization-mode parameter to values other than AlwaysAllow.
          One such example could be as below.
          --authorization-mode=RBAC
        scored: true

      - id: 2.2.2
        text: "--authorization-mode Node 권한 사용 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --authorization-mode parameter to a value that includes Node.
          --authorization-mode=Node,RBAC
        scored: true

      - id: 2.2.3
        text: "--authorization-mode RBAC 권한 사용 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --authorization-mode parameter to a value that includes RBAC,
          for example:
          --authorization-mode=Node,RBAC
        scored: true

  - id: 2.3
    text: "API Server SSL/TLS 적용"
    checks:
      - id: 2.3.1
        text: "--kubelet-https true 또는 미설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--kubelet-https"
              compare:
                op: eq
                value: true
            - flag: "--kubelet-https"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and remove the --kubelet-https parameter.
        scored: true

      - id: 2.3.2
        text: "--secure-port 0 아닌 다른 값으로 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--secure-port"
              compare:
                op: gt
                value: 0
              set: true
            - flag: "--secure-port"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and either remove the --secure-port parameter or
          set it to a different (non-zero) desired port.
        scored: true

      - id: 2.3.3
        text: "--kubelet-client-certificate, --kubelet-client-key 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
              set: true
            - flag: "--kubelet-client-key"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the
          apiserver and kubelets. Then, edit API server pod specification file
          $apiserverconf on the master node and set the
          kubelet client certificate and key parameters as below.
          --kubelet-client-certificate=<path/to/client-certificate-file>
          --kubelet-client-key=<path/to/client-key-file>
        scored: true

      - id: 2.3.4
        text: "--kubelet-certificate-authority 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
              set: true
        remediation: |
          Follow the Kubernetes documentation and setup the TLS connection between
          the apiserver and kubelets. Then, edit the API server pod specification file
          $apiserverconf on the master node and set the
          --kubelet-certificate-authority parameter to the path to the cert file for the certificate authority.
          --kubelet-certificate-authority=<ca-string>
        scored: true

      - id: 2.3.5
        text: "--service-account-key-file 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-key-file"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --service-account-key-file parameter
          to the public key file for service accounts:
          --service-account-key-file=<filename>
        scored: true

      - id: 2.3.6
        text: "--tls-cert-file, --tls-private-key-file 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
              set: true
            - flag: "--tls-private-key-file"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the TLS certificate and private key file parameters.
          --tls-cert-file=<path/to/tls-certificate-file>
          --tls-private-key-file=<path/to/tls-key-file>
        scored: true

      - id: 2.3.7
        text: "--client-ca-file 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--client-ca-file"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the client certificate authority file.
          --client-ca-file=<path/to/client-ca-file>
        scored: true

      - id: 2.3.8
        text: "안전한 SSL/TLS 버전 사용 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: valid_elements
                value: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
        remediation: |
          Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
          on the master node and set the below parameter.
          --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM
          _SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM
          _SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM
          _SHA384
        scored: false

  - id: 2.4
    text: "Admission Control Plugin 설정"
    checks:
      - id: 2.4.1
        text: "EventRateLimit 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set the desired limits in a configuration file.
          Then, edit the API server pod specification file $apiserverconf
          and set the below parameters.
          --enable-admission-plugins=...,EventRateLimit,...
          --admission-control-config-file=<path/to/configuration/file>
        scored: true

      - id: 2.4.2
        text: "AlwaysAdmit 제거 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
              set: true
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and either remove the --enable-admission-plugins parameter, or set it to a
          value that does not include AlwaysAdmit.
        scored: true

      - id: 2.4.3
        text: "AlwaysPullImages 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to include
          AlwaysPullImages.
          --enable-admission-plugins=...,AlwaysPullImages,...
        scored: false

      - id: 2.4.4
        text: "PodSecurityPolicy 설정 확인, 설정 불가 시 SecurityContextDeny 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "SecurityContextDeny"
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to include
          SecurityContextDeny, unless PodSecurityPolicy is already in place.
          --enable-admission-plugins=...,SecurityContextDeny,...
        scored: false

      - id: 2.4.5
        text: "ServiceAccount 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          Follow the documentation and create ServiceAccount objects as per your environment.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and ensure that the --disable-admission-plugins parameter is set to a
          value that does not include ServiceAccount.
        scored: true

      - id: 2.4.6
        text: "NamespaceLifecycle 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --disable-admission-plugins parameter to
          ensure it does not include NamespaceLifecycle.
        scored: true

      - id: 2.4.7
        text: "PodSecurityPolicy 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
              set: true
        remediation: |
          Follow the documentation and create Pod Security Policy objects as per your environment.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to a
          value that includes PodSecurityPolicy:
          --enable-admission-plugins=...,PodSecurityPolicy,...
          Then restart the API Server.
        scored: true

      - id: 2.4.8
        text: "NodeRestriction 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to a
          value that includes NodeRestriction.
          --enable-admission-plugins=...,NodeRestriction,...
        scored: true

  - id: 2.5
    text: "API Server 로그 관리"
    checks:
      - id: 2.5.1
        text: "--audit-log-path argument 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-path"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-path parameter to a suitable path and
          file where you would like audit logs to be written, for example:
          --audit-log-path=/var/log/apiserver/audit.log
        scored: true

      - id: 2.5.2
        text: "--audit-log-maxage 30 또는 적절한 값으로 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days:
          --audit-log-maxage=30
        scored: true

      - id: 2.5.3
        text: "--audit-log-maxbackup 10 또는 적절한 값으로 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate
          value.
          --audit-log-maxbackup=10
        scored: true

      - id: 2.5.4
        text: "--audit-log-maxsize 100 또는 적절한 값으로 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-maxsize parameter to an appropriate size in MB.
          For example, to set it as 100 MB:
          --audit-log-maxsize=100
        scored: true

      - id: 2.5.5
        text: "정책 설정 파일 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-policy-file"
              set: true
        remediation: |
          Create an audit policy file for your cluster.
        scored: true

  - id: 2.6
    text: "etcd SSL/TLS 적용"
    checks:
      - id: 2.6.1
        text: "--etcd-certfile, --etcd-keyfile 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
              set: true
            - flag: "--etcd-keyfile"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the etcd certificate and key file parameters.
          --etcd-certfile=<path/to/client-certificate-file>
          --etcd-keyfile=<path/to/client-key-file>
        scored: true

      - id: 2.6.2
        text: "--etcd-cafile 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--etcd-cafile"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the etcd certificate authority file parameter.
          --etcd-cafile=<path/to/ca-file>
        scored: true

  - id: 2.7
    text: "etcd 암호화 적용"
    checks:
      - id: 2.7.1
        text: "--encryption-provider-config 설정 확인"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure a EncryptionConfig file.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the --encryption-provider-config parameter to the path of that file: --encryption-provider-config=</path/to/EncryptionConfig/File>
        scored: true

      - id: 2.7.2
        text: "안전한 암호화 방식 사용 여부 확인"
        audit: "helper_scripts/check_encryption_provider_config.sh aescbc kms secretbox"
        tests:
          test_items:
            - flag: "true"
              compare:
                op: eq
                value: "true"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure a EncryptionConfig file.
          In this file, choose aescbc, kms or secretbox as the encryption provider.
        scored: true

  - id: 3.1
    text: "Controller 인증 제어"
    checks:
      - id: 3.1.1
        text: "--terminated-pod-gc-threshold 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --terminated-pod-gc-threshold to an appropriate threshold,
          for example:
          --terminated-pod-gc-threshold=10
        scored: false

      - id: 3.1.2
        text: "--profiling false 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the below parameter.
          --profiling=false
        scored: true

      - id: 3.1.3
        text: "--use-service-account-credentials true 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node to set the below parameter.
          --use-service-account-credentials=true
        scored: true

      - id: 3.1.4
        text: "--service-account-private-key-file 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --service-account-private-key-file parameter
          to the private key file for service accounts.
          --service-account-private-key-file=<filename>
        scored: true

      - id: 3.1.5
        text: "--address 127.0.0.1 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--address"
              set: false
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and ensure the correct value for the --address parameter
        scored: true

      - id: 3.1.6
        text: "--bind-address 127.0.0.1 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and ensure the correct value for the --bind-address parameter
        scored: true

  - id: 3.2
    text: "Controller SSL/TLS 적용"
    checks:
      - id: 3.2.1
        text: "--root-ca-file 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--root-ca-file"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --root-ca-file parameter to the certificate bundle file`.
          --root-ca-file=<path/to/file>
        scored: true

      - id: 3.2.2
        text: "RotateKubeletServerCertificate true 설정 확인"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--feature-gates"
              compare:
                op: eq
                value: "RotateKubeletServerCertificate=true"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.
          --feature-gates=RotateKubeletServerCertificate=true

          Cluster provisioned by RKE handles certificate rotation directly through RKE.
        scored: true

  - id: 4.1
    text: "Scheduler 인증 제어"
    checks:
      - id: 4.1.1
        text: "--profiling false 설정 확인"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the Scheduler pod specification file $schedulerconf file
          on the master node and set the below parameter.
          --profiling=false
        scored: true

      - id: 4.1.2
        text: "--address 127.0.0.1 설정 확인"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--address"
              set: false
        remediation: |
          Edit the Scheduler pod specification file $schedulerconf
          on the master node and ensure the correct value for the --address parameter
        scored: true

      - id: 4.1.3
        text: "--bind-address 127.0.0.1 설정 확인"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Scheduler pod specification file $schedulerconf
          on the master node and ensure the correct value for the --bind-address parameter
        scored: true
